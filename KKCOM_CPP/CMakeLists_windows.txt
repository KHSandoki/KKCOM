cmake_minimum_required(VERSION 3.16)
project(KKCOM_CPP)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Windows specific settings
if(WIN32)
    add_definitions(-D_WIN32_WINNT=0x0601)  # Windows 7 or later
    add_definitions(-DWIN32_LEAN_AND_MEAN)
    add_definitions(-DNOMINMAX)
endif()

# Use vcpkg if available
if(DEFINED CMAKE_TOOLCHAIN_FILE)
    find_package(OpenGL REQUIRED)
    find_package(glfw3 CONFIG REQUIRED)
    find_package(nlohmann_json CONFIG REQUIRED)
    set(HAVE_DEPENDENCIES TRUE)
else()
    message(STATUS "vcpkg not detected, using manual dependency setup")
    set(HAVE_DEPENDENCIES FALSE)
endif()

# Manual dependency setup for Windows
if(NOT HAVE_DEPENDENCIES)
    # OpenGL (usually available on Windows)
    find_package(OpenGL REQUIRED)
    
    # For manual setup, we'll include libraries in the project
    set(GLFW_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libs/glfw")
    set(JSON_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libs/json")
    
    if(EXISTS "${GLFW_DIR}")
        add_subdirectory(${GLFW_DIR})
        set(GLFW_FOUND TRUE)
    else()
        message(WARNING "GLFW not found at ${GLFW_DIR}")
        set(GLFW_FOUND FALSE)
    endif()
    
    if(EXISTS "${JSON_DIR}")
        include_directories(${JSON_DIR}/include)
        set(JSON_FOUND TRUE)
    else()
        message(WARNING "nlohmann/json not found at ${JSON_DIR}")
        set(JSON_FOUND FALSE)
    endif()
endif()

# Add ImGui
set(IMGUI_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libs/imgui")
if(EXISTS "${IMGUI_DIR}")
    file(GLOB IMGUI_SOURCES 
        "${IMGUI_DIR}/*.cpp"
        "${IMGUI_DIR}/backends/imgui_impl_glfw.cpp"
        "${IMGUI_DIR}/backends/imgui_impl_opengl3.cpp"
    )
    message(STATUS "Found ImGui sources")
    set(IMGUI_FOUND TRUE)
else()
    message(WARNING "ImGui not found at ${IMGUI_DIR}")
    set(IMGUI_SOURCES "")
    set(IMGUI_FOUND FALSE)
endif()

# Include directories
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

if(IMGUI_FOUND)
    include_directories(
        ${IMGUI_DIR}
        ${IMGUI_DIR}/backends
    )
endif()

# Source files
file(GLOB_RECURSE SOURCES "src/*.cpp")
list(REMOVE_ITEM SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/test_serial.cpp")

# Create executable
if(IMGUI_FOUND AND (HAVE_DEPENDENCIES OR GLFW_FOUND))
    add_executable(${PROJECT_NAME} ${SOURCES} ${IMGUI_SOURCES})
    
    # Link libraries
    target_link_libraries(${PROJECT_NAME} OpenGL::GL)
    
    if(HAVE_DEPENDENCIES)
        target_link_libraries(${PROJECT_NAME} glfw nlohmann_json::nlohmann_json)
    else()
        if(GLFW_FOUND)
            target_link_libraries(${PROJECT_NAME} glfw)
        endif()
    endif()
    
    # Windows specific libraries
    target_link_libraries(${PROJECT_NAME} winmm ws2_32 setupapi)
    
    # Set as console application for now
    set_target_properties(${PROJECT_NAME} PROPERTIES
        WIN32_EXECUTABLE FALSE
    )
    
    message(STATUS "Full GUI version will be built")
else()
    message(STATUS "Building test version only (missing dependencies)")
    
    # Build test version instead
    set(TEST_SOURCES 
        src/test_serial.cpp
        src/SerialManager.cpp
    )
    
    add_executable(KKCOM_Serial_Test ${TEST_SOURCES})
    target_link_libraries(KKCOM_Serial_Test winmm ws2_32 setupapi)
endif()